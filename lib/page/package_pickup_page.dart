// package_pickup_page.dart

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:delivery_project/page/order_status_page.dart'; // ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á Import ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏≤‡∏Å‡∏°‡∏µ

// Constants (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ò‡∏µ‡∏°‡∏´‡∏•‡∏±‡∏Å)
const Color _primaryColor = Color(0xFFC70808);
const Color _backgroundColor = Color(0xFFFDE9E9);

// ------------------------------------------------------------------
// Model (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏° orderDetails ‡πÅ‡∏•‡∏∞ deliveredImageUrl)
// ------------------------------------------------------------------
class PackageModel {
  final String id;
  final String source;
  final String destination;
  final String currentStatus;
  final String customerId;
  final String? riderId;
  final String orderDetails;
  final String? deliveredImageUrl;

  PackageModel({
    required this.id,
    required this.source,
    required this.destination,
    required this.currentStatus,
    required this.customerId,
    this.riderId,
    required this.orderDetails,
    this.deliveredImageUrl,
  });

  factory PackageModel.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;

    String sourceDetail = data['pickupAddress']?['detail'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á';
    String destinationDetail =
        data['deliveryAddress']?['detail'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á';

    // ‡∏î‡∏∂‡∏á Delivered Image URL
    String? deliveredImgUrl;
    if (data['currentStatus'] == 'delivered' ||
        data['currentStatus'] == 'completed') {
      deliveredImgUrl = data['deliveredImageUrl'];

      // ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å statusHistory (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ delivered ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ)
      if (deliveredImgUrl == null && data['statusHistory'] is List) {
        final deliveredEntry = (data['statusHistory'] as List).firstWhereOrNull(
            (h) =>
                h['status'] == 'delivered' &&
                h['imgOfStatus']?.isNotEmpty == true);
        deliveredImgUrl = deliveredEntry?['imgOfStatus'];
      }
    }

    return PackageModel(
      id: doc.id,
      source: '‡∏à‡∏≤‡∏Å: $sourceDetail',
      destination: '‡πÑ‡∏õ‡∏ó‡∏µ‡πà: $destinationDetail',
      currentStatus: data['currentStatus'] ?? 'unknown',
      customerId: data['customerId'] ?? '',
      riderId: data['riderId'],
      orderDetails: data['orderDetails'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      deliveredImageUrl: deliveredImgUrl,
    );
  }
}

// ------------------------------------------------------------------
// Controller (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
// ------------------------------------------------------------------
class PackagePickupController extends GetxController {
  final String uid;
  final RxString userPhone = ''.obs;
  final TextEditingController searchController = TextEditingController();
  final RxString searchText = ''.obs; // NEW: ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á

  PackagePickupController(this.uid);

  @override
  void onInit() {
    _fetchUserPhone();
    super.onInit();
  }

  // ‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Future<void> _fetchUserPhone() async {
    try {
      final doc =
          await FirebaseFirestore.instance.collection('users').doc(uid).get();
      if (doc.exists) {
        userPhone.value = doc.data()?['phone'] ?? '';
      }
    } catch (e) {
      print('Error fetching user phone: $e');
    }
  }

  // 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Stream ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ (‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
  Stream<QuerySnapshot> getRecipientPackagesStream() {
    if (userPhone.value.isEmpty) {
      return Stream.empty();
    }
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ receiverPhone ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    final baseQuery = FirebaseFirestore.instance
        .collection('orders')
        .where('deliveryAddress.receiverPhone', isEqualTo: userPhone.value)
        .snapshots();
  }

  // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á/‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå) ‡∏à‡∏≤‡∏Å UID (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  Future<String> getUserName(String userId, String defaultName) async {
    if (userId.isEmpty) return defaultName;
    try {
      final doc = await FirebaseFirestore.instance
          .collection('users')
          .doc(userId)
          .get();
      if (doc.exists) {
        return doc.data()?['fullname'] ?? defaultName;
      }
      return defaultName;
    } catch (e) {
      return defaultName;
    }
  }

  // 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'completed'
  Future<void> confirmPackageReception(String orderId) async {
    Get.dialog(
        const Center(child: CircularProgressIndicator(color: _primaryColor)),
        barrierDismissible: false);
    try {
      final orderRef =
          FirebaseFirestore.instance.collection('orders').doc(orderId);

      await orderRef.update({
        'currentStatus': 'completed',
        'statusHistory': FieldValue.arrayUnion([
          {
            'imgOfStatus': 'received by recipient',
            'status': 'completed',
            'timestamp': Timestamp.now()
          }
        ]),
      });

      Get.back();
      Get.snackbar('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏ $orderId ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
          backgroundColor: Colors.green, colorText: Colors.white);
    } catch (e) {
      Get.back();
      Get.snackbar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ: $e',
          backgroundColor: _primaryColor, colorText: Colors.white);
    }
  }
}

// ------------------------------------------------------------------
// Page (UI)
// ------------------------------------------------------------------
class PackagePickupPage extends StatelessWidget {
  final String uid;
  final int role;
  // uid ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô uid ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
  const PackagePickupPage({super.key, required this.uid, required this.role});

  @override
  Widget build(BuildContext context) {
    final controller = Get.put(PackagePickupController(uid));

    return Scaffold(
      backgroundColor: _backgroundColor,
      body: CustomScrollView(
        slivers: [
          _buildHeader(context),
          SliverPadding(
            padding: const EdgeInsets.all(20.0),
            sliver: SliverList(
              delegate: SliverChildListDelegate(
                [
                  _buildSearchBar(controller), // Pass controller
                  const SizedBox(height: 20),
                  // ‡πÉ‡∏ä‡πâ Obx ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ userPhone ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                  Obx(() {
                    if (controller.userPhone.value.isEmpty) {
                      return const Center(
                          child: Padding(
                        padding: EdgeInsets.only(top: 50),
                        child: CircularProgressIndicator(color: _primaryColor),
                      ));
                    }
                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ StreamBuilder ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Obx
                    return _buildPackagesList(controller);
                  }),
                ],
              ),
            ),
          ),
        ],
      ),
      bottomNavigationBar: _buildBottomNavigationBar(context),
    );
  }

  // 4. Widget ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏î‡πâ‡∏ß‡∏¢ StreamBuilder (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á Client-side)
  Widget _buildPackagesList(PackagePickupController controller) {
    return StreamBuilder<QuerySnapshot>(
      stream: controller.getRecipientPackagesStream(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(
              child: CircularProgressIndicator(color: _primaryColor));
        }

        if (snapshot.hasError) {
          return Center(child: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${snapshot.error}'));
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.only(top: 50.0),
              child: Text(
                'üì¶ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ',
                style: TextStyle(fontSize: 16, color: Colors.grey),
              ),
            ),
          );
        }

        final packages = snapshot.data!.docs
            .map((doc) => PackageModel.fromFirestore(doc))
            .toList();

        return Column(
          children: filteredPackages.map((package) {
            String statusText;
            Color statusColor;
            bool showConfirmButton = false;

            switch (package.currentStatus) {
              case 'pending':
                statusText = '‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô';
                statusColor = Colors.blueGrey;
                break;
              case 'assigned':
                statusText = '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
                statusColor = Colors.orange;
                break;
              case 'picked_up':
                statusText = '‡∏£‡∏±‡∏ö‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
                statusColor = Colors.amber.shade800;
                break;
              case 'in_transit':
                statusText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á';
                statusColor = Colors.amber.shade800;
                break;
              case 'delivered':
                statusText = '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                statusColor = Colors.green;
                showConfirmButton = true; // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                break;
              case 'completed':
                statusText =
                    '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚úîÔ∏è'; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡πá‡∏ô
                statusColor = Colors.teal;
                break;
              default:
                statusText = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
                statusColor = Colors.grey;
            }

            return FutureBuilder<Map<String, String>>(
              future:
                  _fetchNames(controller, package.customerId, package.riderId),
              builder: (context, nameSnapshot) {
                String senderName =
                    nameSnapshot.data?['sender'] ?? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
                String riderName =
                    nameSnapshot.data?['rider'] ?? '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå';

                return _buildPackageItem(
                  package,
                  statusText,
                  statusColor,
                  showConfirmButton,
                  senderName,
                  riderName,
                  controller.confirmPackageReception,
                );
              },
            );
          }).toList(),
        );
      },
    );
  }

  // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  Future<Map<String, String>> _fetchNames(PackagePickupController controller,
      String customerId, String? riderId) async {
    final senderName = await controller.getUserName(customerId, '‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á');
    final riderName = riderId != null
        ? await controller.getUserName(riderId, '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå')
        : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå';
    return {'sender': senderName, 'rider': riderName};
  }

  // 5. Widget ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á/‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå + ‡∏£‡∏π‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô)
  Widget _buildPackageItem(
      PackageModel package,
      String statusText,
      Color statusColor,
      bool showConfirmButton,
      String senderName,
      String riderName,
      Function(String) onConfirm) {
    return Card(
      margin: const EdgeInsets.only(bottom: 15),
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
      child: InkWell(
        onTap: () {
          // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ OrderStatusPage ‡πÑ‡∏î‡πâ
          Get.snackbar(
              '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏±‡∏™‡∏î‡∏∏ ${package.id}');
        },
        child: Padding(
          padding: const EdgeInsets.all(15.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ------------------ ‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏Å (‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞) ------------------
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á: ${package.destination}',
                      style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: _primaryColor),
                    ),
                  ),
                  Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                    decoration: BoxDecoration(
                      color: statusColor,
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      statusText,
                      style: const TextStyle(color: Colors.white, fontSize: 12),
                    ),
                  ),
                ],
              ),
              const Divider(),
              _buildDetailRow(Icons.person_outline, '‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: $senderName'),
              _buildDetailRow(
                  Icons.two_wheeler_outlined, '‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå: $riderName'),
              _buildDetailRow(Icons.pin_drop, package.source),
              _buildDetailRow(Icons.qr_code, '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏±‡∏™‡∏î‡∏∏: ${package.id}'),
              const SizedBox(height: 10),
              // ------------------ ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ------------------
              if (showConfirmButton)
                Align(
                  alignment: Alignment.centerRight,
                  child: ElevatedButton.icon(
                    onPressed: () => onConfirm(package.id),
                    icon: const Icon(Icons.check_circle, color: Colors.white),
                    label: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö',
                        style: TextStyle(color: Colors.white)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green.shade600,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8)),
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  // ‡∏™‡πà‡∏ß‡∏ô Header (‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö")
  Widget _buildHeader(BuildContext context) {
    return SliverAppBar(
      expandedHeight: 150.0,
      floating: false,
      pinned: true,
      backgroundColor: _primaryColor,
      flexibleSpace: FlexibleSpaceBar(
        titlePadding: EdgeInsets.zero,
        centerTitle: false,
        title: const Padding(
          padding: EdgeInsets.only(left: 20, bottom: 8),
          child: Text(
            '‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
        ),
        background: ClipPath(
          clipper: HeaderClipper(),
          child: Container(
            color: _primaryColor,
            alignment: Alignment.centerLeft,
            padding: const EdgeInsets.only(left: 20, top: 50),
            child: const Text(
              '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏£‡∏≠‡∏£‡∏±‡∏ö',
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ),
      ),
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => Get.back(),
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  Widget _buildSearchBar(PackagePickupController controller) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 10),
      height: 50,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: Colors.grey.shade300),
      ),
      child: TextField(
        controller: controller.searchController,
        decoration: InputDecoration(
          hintText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏´‡∏±‡∏™‡∏û‡∏±‡∏™‡∏î‡∏∏',
          border: InputBorder.none,
          prefixIcon: Icon(Icons.search, color: _primaryColor),
        ),
      ),
    );
  }

  Widget _buildDetailRow(IconData icon, String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Icon(icon, size: 20, color: Colors.grey.shade700),
          const SizedBox(width: 8),
          Expanded(child: Text(text, style: const TextStyle(fontSize: 14))),
        ],
      ),
    );
  }

  // Bottom Navigation Bar
  Widget _buildBottomNavigationBar(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        color: _primaryColor,
        boxShadow: [
          BoxShadow(
              color: Colors.black12, offset: Offset(0, -2), blurRadius: 5),
        ],
      ),
      child: BottomNavigationBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        selectedItemColor: Colors.white,
        unselectedItemColor: Colors.white70,
        type: BottomNavigationBarType.fixed,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: '‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å'),
          BottomNavigationBarItem(
            icon: Icon(Icons.history),
            label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.logout),
            label: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
          ),
        ],
        currentIndex: 0,
        onTap: (index) {
          // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Navigation
        },
      ),
    );
  }
}

// Custom Clipper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Header
class HeaderClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    double h = size.height;
    double w = size.width;
    Path path = Path();

    path.lineTo(0, h * 0.85);
    path.quadraticBezierTo(w * 0.15, h * 0.95, w * 0.45, h * 0.85);
    path.quadraticBezierTo(w * 0.65, h * 0.75, w, h * 0.8);
    path.lineTo(w, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}
